import BST from './BST.js';

const tree = new BST();
tree.root = tree.insert(tree.root, 5);
tree.root = tree.insert(tree.root, 1);
tree.root = tree.insert(tree.root, 3);
tree.root = tree.insert(tree.root, 4);
tree.root = tree.insert(tree.root, 2);
tree.root = tree.insert(tree.root, 7);
tree.root = tree.insert(tree.root, 8);

// -------------------------------------------------------------------------------------------------------------------------------
function minValueInBST(root) {
    if (root === null) return Number.MAX_VALUE;
    let result = root.key;
    const left = minValueInBST(root.left);
    const right = minValueInBST(root.right);
    if (left < result) {
        result = left;
    }
    if (right < result) {
        result = right;
    }
    return result;
}

// -------------------------------------------------------------------------------------------------------------------------------
function maxValueInBST(root) {
    if (root === null) return Number.MIN_VALUE;
    let result = root.key;
    const left = maxValueInBST(root.left);
    const right = maxValueInBST(root.right);
    if (left > result) {
        result = left;
    }
    if (right > result) {
        result = right;
    }
    return result;
}

// -------------------------------------------------------------------------------------------------------------------------------
function inorderSuccessor(root) {
    if (root === null) return -1;
    let node = root.right;
    while (node.left !== null) {
        node = node.left;
    }
    return node;
}

// -------------------------------------------------------------------------------------------------------------------------------
function inorderPredecessor(root) {
    if (root === null) return -1;
    let node = root.left;
    while (node.right !== null) {
        node = node.right;
    }
    return node;
}

// -------------------------------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------------------